# Unified Dockerfile for Hazard Detection - All Services in One Container
# Multi-stage build for optimal size and performance
FROM node:20-alpine AS node-builder

WORKDIR /app

# Install Node.js dependencies
COPY package*.json ./
RUN npm install --omit=dev && npm cache clean --force

# Stage 2: Python Builder with intelligent model support
FROM python:3.11-slim AS python-builder

WORKDIR /app

# Install Python dependencies and OpenVINO
RUN apt-get update && apt-get install -y \
    gcc g++ cmake pkg-config wget curl \
    libhdf5-dev libgl1-mesa-glx libglib2.0-0 \
    libsm6 libxext6 libxrender-dev libgomp1 \
    libusb-1.0-0-dev libgtk-3-dev libavcodec-dev \
    libavformat-dev libswscale-dev libv4l-dev \
    && rm -rf /var/lib/apt/lists/*

# Create a non-root user
RUN useradd -m -s /bin/bash appuser && \
    mkdir -p /home/appuser/.local/bin && \
    chown -R appuser:appuser /home/appuser

# Add local bin to PATH
ENV PATH=/home/appuser/.local/bin:$PATH

# Create comprehensive requirements combining all needs
COPY unified-requirements.txt /app/unified-requirements.txt

# Switch to non-root user before pip install
USER appuser
RUN pip install --no-cache-dir --user -r /app/unified-requirements.txt
USER root

# Stage 3: Final Runtime with intelligent CPU detection
FROM python:3.11-slim

# Install runtime dependencies and tools
RUN apt-get update && apt-get install -y \
    curl bash procps htop \
    libgl1-mesa-glx libglib2.0-0 libsm6 \
    libxext6 libxrender-dev libgomp1 \
    libusb-1.0-0 cpuid util-linux \
    && rm -rf /var/lib/apt/lists/*

# Install Node.js in the final stage
RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - \
    && apt-get install -y nodejs \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Create non-root user in final stage
RUN useradd -m -s /bin/bash appuser \
    && mkdir -p /home/appuser/.local/bin \
    && chown -R appuser:appuser /home/appuser

# Copy Python dependencies from builder to non-root user
COPY --from=python-builder /app/unified-requirements.txt /app/unified-requirements.txt
RUN pip install --no-cache-dir --user -r /app/unified-requirements.txt
ENV PATH=/home/appuser/.local/bin:$PATH

# Copy Node.js dependencies from builder
COPY --from=node-builder /app/node_modules ./node_modules
COPY --from=node-builder /app/package*.json ./

# Install Node.js process management tools
RUN npm install -g pm2 concurrently

# Create proper directory structure
RUN mkdir -p /app/public /app/server /app/api /app/scripts /app/models

# Copy application files with their original structure
COPY api/ ./api/
COPY server/ ./server/
COPY public/ ./public/
COPY scripts/ ./scripts/

# Create symbolic links for unified model access
RUN mkdir -p /app/models/openvino /app/models/pytorch \
    && rm -rf /app/models/openvino/* /app/models/pytorch/* 2>/dev/null || true \
    && ln -sf /app/api/best_openvino_model/* /app/models/openvino/ 2>/dev/null || true \
    && ln -sf /app/public/object_detecion_model/* /app/models/pytorch/ 2>/dev/null || true \
    && ln -sf /app/api/best.pt /app/models/pytorch/best.pt 2>/dev/null || true \
    && chown -R appuser:appuser /app/models

# Copy startup and health check scripts
COPY start-unified.sh /app/start-unified.sh
COPY health-check.sh /app/health-check.sh

# Make scripts executable
RUN chmod +x /app/scripts/detect-cpu-and-select-model.py \
    && chmod +x /app/start-unified.sh \
    && chmod +x /app/health-check.sh

# Set environment variables for new port configuration
ENV NODE_ENV=production
ENV PYTHONPATH=/app
ENV WEB_PORT=3000
ENV API_PORT=8000
ENV PORT=3000
ENV API_URL=http://localhost:8000

# Expose both ports: 3000 for Node.js web server, 8000 for Python API
EXPOSE 3000 8000

# Health check for the unified container (check both services)
HEALTHCHECK --interval=30s --timeout=15s --start-period=60s --retries=3 \
    CMD /app/health-check.sh

# Switch to non-root user for running the application
USER appuser

# Use the intelligent startup script
CMD ["/app/start-unified.sh"]