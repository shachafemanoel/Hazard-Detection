# Multi-stage build for lightweight Hazard Detection System
# Stage 1: Node.js builder
FROM node:20-alpine AS node-builder
WORKDIR /app
COPY package*.json ./
RUN npm install --omit=dev && npm cache clean --force

# Stage 2: Python builder (minimal)
FROM python:3.11-slim AS python-builder
WORKDIR /app

# Install build dependencies
RUN apt-get update && apt-get install -y \
    gcc g++ pkg-config wget curl \
    libgl1-mesa-glx libglib2.0-0 \
    && rm -rf /var/lib/apt/lists/*

# Create minimal requirements
RUN cat > /app/unified-requirements.txt << EOF
# Core FastAPI and web server dependencies
fastapi==0.104.1
uvicorn[standard]==0.24.0
python-multipart==0.0.6
pydantic==2.5.0

# AI/ML Dependencies - minimal set
numpy==1.24.3
opencv-python-headless==4.8.1.78
pillow==10.0.1

# PyTorch CPU-only (smaller)
torch>=2.0.0 --index-url https://download.pytorch.org/whl/cpu
torchvision>=0.15.0 --index-url https://download.pytorch.org/whl/cpu

# Utilities
aiohttp==3.9.1
redis==5.0.1
py-cpuinfo==9.0.0
requests==2.31.0
python-dotenv==1.0.0
EOF

# Install Python dependencies
RUN pip install --no-cache-dir --user -r /app/unified-requirements.txt

# Stage 3: Final Runtime
FROM python:3.11-slim

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    curl bash procps htop \
    libgl1-mesa-glx libglib2.0-0 libsm6 \
    libxext6 libxrender-dev libgomp1 \
    libusb-1.0-0 util-linux \
    && rm -rf /var/lib/apt/lists/*

# Install Node.js
RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - \
    && apt-get install -y nodejs \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy Python packages from builder
COPY --from=python-builder /root/.local /root/.local

# Copy Node.js modules from builder  
COPY --from=node-builder /app/node_modules ./node_modules

# Copy application files
COPY api/ ./api/
COPY server/ ./server/
COPY public/ ./public/
COPY package*.json ./

# Copy models to unified location
RUN mkdir -p /app/models/openvino /app/models/pytorch
COPY api/best_openvino_model/ ./models/openvino/
COPY public/object_detecion_model/ ./models/pytorch/
COPY api/best.pt ./models/pytorch/best.pt

# Create CPU detection script
COPY <<EOF /app/scripts/detect-cpu.py
#!/usr/bin/env python3
import cpuinfo
import json
import os

def detect_cpu_and_select_model():
    info = cpuinfo.get_cpu_info()
    
    # Simple CPU detection
    cpu_supports_avx = 'avx' in info.get('flags', [])
    cpu_supports_sse4_2 = 'sse4_2' in info.get('flags', [])
    
    # Model selection logic
    if cpu_supports_avx and cpu_supports_sse4_2:
        backend = 'pytorch'  # Use PyTorch for compatibility
        model_path = '/app/models/pytorch/best.pt'
    else:
        backend = 'pytorch'  # Fallback to PyTorch
        model_path = '/app/models/pytorch/best.pt'
    
    config = {
        'backend': backend,
        'model_path': model_path,
        'cpu_info': {
            'brand': info.get('brand_raw', 'Unknown'),
            'supports_avx': cpu_supports_avx,
            'supports_sse4_2': cpu_supports_sse4_2
        }
    }
    
    with open('/app/model-config.json', 'w') as f:
        json.dump(config, f, indent=2)
    
    print(f"Selected backend: {backend}")
    print(f"Model path: {model_path}")
    
    return config

if __name__ == "__main__":
    detect_cpu_and_select_model()
EOF

# Create startup script
COPY <<EOF /app/start-unified.sh
#!/bin/bash
set -e

echo "🚀 Starting Hazard Detection Unified Container"

# Detect CPU and select model
echo "🔍 Detecting CPU capabilities..."
python3 /app/scripts/detect-cpu.py

# Start FastAPI backend in background
echo "🤖 Starting FastAPI backend..."
cd /app
python3 -m uvicorn api.app:app --host 0.0.0.0 --port 8000 &

# Wait for backend to start
sleep 5

# Start Node.js web server
echo "🌐 Starting web server..."
cd /app
node server/routes/simple-server.js &

# Wait for services to be ready
echo "⏳ Waiting for services to start..."
sleep 10

echo "✅ All services started successfully!"

# Keep container running
wait
EOF

# Create health check script
COPY <<EOF /app/health-check.sh
#!/bin/bash
curl -f http://localhost:8080/health >/dev/null 2>&1 || exit 1
curl -f http://localhost:8000/health >/dev/null 2>&1 || exit 1
EOF

# Make scripts executable
RUN chmod +x /app/scripts/detect-cpu.py
RUN chmod +x /app/start-unified.sh
RUN chmod +x /app/health-check.sh

# Expose ports
EXPOSE 8000 8080

# Health check
HEALTHCHECK --interval=30s --timeout=15s --start-period=60s --retries=3 \
    CMD /app/health-check.sh

# Use the startup script
CMD ["/app/start-unified.sh"]