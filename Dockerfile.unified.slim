# Multi-stage build for lightweight Hazard Detection System
# Stage 1: Node.js builder
FROM node:20-alpine AS node-builder
WORKDIR /app
COPY package*.json ./
RUN npm install --omit=dev && npm cache clean --force

# Stage 2: Python builder (minimal)
FROM python:3.11-slim AS python-builder
WORKDIR /app

# Install build dependencies
RUN apt-get update && apt-get install -y \
    gcc g++ pkg-config wget curl \
    libgl1-mesa-glx libglib2.0-0 \
    && rm -rf /var/lib/apt/lists/*

# Copy minimal requirements
COPY requirements.txt /app/requirements.txt

# Install Python dependencies
RUN pip install --no-cache-dir --user -r /app/requirements.txt

# Stage 3: Final Runtime
FROM python:3.11-slim

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    curl bash procps htop \
    libgl1-mesa-glx libglib2.0-0 libsm6 \
    libxext6 libxrender-dev libgomp1 \
    libusb-1.0-0 util-linux \
    && rm -rf /var/lib/apt/lists/*

# Install Node.js
RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - \
    && apt-get install -y nodejs \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy Python packages from builder
COPY --from=python-builder /root/.local /root/.local

# Copy Node.js modules from builder  
COPY --from=node-builder /app/node_modules ./node_modules

# Copy application files (frontend only - no API directory)
COPY server/ ./server/
COPY public/ ./public/
COPY package*.json ./

# Copy models to unified location (only from public directory)
RUN mkdir -p /app/models/pytorch
COPY public/object_detection_model/ ./models/pytorch/

# Create CPU detection script
COPY <<EOF /app/scripts/detect-cpu.py
#!/usr/bin/env python3
import cpuinfo
import json
import os

def detect_cpu_and_select_model():
    info = cpuinfo.get_cpu_info()
    
    # Simple CPU detection
    cpu_supports_avx = 'avx' in info.get('flags', [])
    cpu_supports_sse4_2 = 'sse4_2' in info.get('flags', [])
    
    # Model selection logic
    if cpu_supports_avx and cpu_supports_sse4_2:
        backend = 'pytorch'  # Use PyTorch for compatibility
        model_path = '/app/models/pytorch/best.pt'
    else:
        backend = 'pytorch'  # Fallback to PyTorch
        model_path = '/app/models/pytorch/best.pt'
    
    config = {
        'backend': backend,
        'model_path': model_path,
        'cpu_info': {
            'brand': info.get('brand_raw', 'Unknown'),
            'supports_avx': cpu_supports_avx,
            'supports_sse4_2': cpu_supports_sse4_2
        }
    }
    
    with open('/app/model-config.json', 'w') as f:
        json.dump(config, f, indent=2)
    
    print(f"Selected backend: {backend}")
    print(f"Model path: {model_path}")
    
    return config

if __name__ == "__main__":
    detect_cpu_and_select_model()
EOF

# Create startup script (frontend only)
COPY <<EOF /app/start-unified.sh
#!/bin/bash
set -e

echo "🚀 Starting Hazard Detection Frontend"

# Start Node.js web server
echo "🌐 Starting web server..."
cd /app

# Use the main server with full features
node server/routes/server.js

echo "✅ Frontend server started successfully!"
EOF

# Create health check script (frontend only)
COPY <<EOF /app/health-check.sh
#!/bin/bash
# Check if the frontend web server is running
curl -f http://localhost:\${PORT:-3000}/health >/dev/null 2>&1 || exit 1
EOF

# Make scripts executable
RUN chmod +x /app/scripts/detect-cpu.py
RUN chmod +x /app/start-unified.sh
RUN chmod +x /app/health-check.sh

# Expose port (frontend only)
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=15s --start-period=60s --retries=3 \
    CMD /app/health-check.sh

# Use the startup script
CMD ["/app/start-unified.sh"]
